#ifndef SCANNER_H
#define SCANNER_H

#include "common.h"

enum TokenType {
  // Single-character tokens.
  TOKEN_TYPE_LEFT_PAREN, TOKEN_TYPE_RIGHT_PAREN,
  TOKEN_TYPE_LEFT_BRACE, TOKEN_TYPE_RIGHT_BRACE,
  TOKEN_TYPE_COMMA, TOKEN_TYPE_DOT, TOKEN_TYPE_MINUS, TOKEN_TYPE_PLUS,
  TOKEN_TYPE_SEMICOLON, TOKEN_TYPE_SLASH, TOKEN_TYPE_STAR,
  // One or two character tokens.
  TOKEN_TYPE_BANG, TOKEN_TYPE_BANG_EQUAL,
  TOKEN_TYPE_EQUAL, TOKEN_TYPE_EQUAL_EQUAL,
  TOKEN_TYPE_GREATER, TOKEN_TYPE_GREATER_EQUAL,
  TOKEN_TYPE_LESS, TOKEN_TYPE_LESS_EQUAL,
  // Literals.
  TOKEN_TYPE_IDENTIFIER, TOKEN_TYPE_STRING, TOKEN_TYPE_NUMBER,
  // Keywords.
  TOKEN_TYPE_AND, TOKEN_TYPE_CLASS, TOKEN_TYPE_ELSE, TOKEN_TYPE_FALSE,
  TOKEN_TYPE_FOR, TOKEN_TYPE_FUN, TOKEN_TYPE_IF, TOKEN_TYPE_NIL, TOKEN_TYPE_OR,
  TOKEN_TYPE_PRINT, TOKEN_TYPE_RETURN, TOKEN_TYPE_SUPER, TOKEN_TYPE_THIS,
  TOKEN_TYPE_TRUE, TOKEN_TYPE_VAR, TOKEN_TYPE_WHILE,

  TOKEN_TYPE_ERROR, TOKEN_TYPE_EOF
};

struct Token {
  enum TokenType type;
  const char *start;
  size_t length;
  size_t line;
};

void scanner_init(const char *source);
struct Token scanner_scan_token(void);

#endif // SCANNER_H